# -- 코드를 작성해주세요
# WITH RECURSIVE GENERATION_TABLE AS (
#     -- 1세대: PARENT_ID IS NULL
#     SELECT ID, 1 AS GENERATION
#     FROM ECOLI_DATA
#     WHERE PARENT_ID IS NULL

#     UNION ALL

#     -- 부모의 세대 +1 = 자식 세대
#     SELECT C.ID, P.GENERATION + 1
#     FROM ECOLI_DATA C
#     JOIN GENERATION_TABLE P ON C.PARENT_ID = P.ID
# )
# SELECT 
#     COUNT(*) AS COUNT,
#     G.GENERATION
# FROM GENERATION_TABLE G
# LEFT JOIN ECOLI_DATA C ON C.PARENT_ID = G.ID
# WHERE C.ID IS NULL   -- 자식이 없는 경우
# GROUP BY G.GENERATION
# ORDER BY G.GENERATION;

# WITH RECURSIVE GENERATION_TABLE AS (
#     SELECT ID, 1 AS GENERATION
#     FROM ECOLI_DATA
#     WHERE PARENT_ID IS NULL
    
#     UNION ALL
    
#     SELECT C.ID, P.GENERATION + 1
#     FROM ECOLI_DATA  AS C
#     JOIN GENERATION_TABLE AS  P ON C.PARENT_ID = P.ID
      
    
# )
# SELECT COUNT(A.ID) AS COUNT, A.GENERATION
# FROM GENERATION_TABLE as A
# LEFT JOIN ECOLI_DATA as B on A.ID = B.PARENT_ID
# WHERE B.ID IS NULL
# GROUP BY A.GENERATION
# ORDER BY A.GENERATION




WITH RECURSIVE GENERATION_TABLE as (
    
    SELECT ID, 1 as GENERATION
    FROM ECOLI_DATA
    WHERE PARENT_ID is NULL
    
    UNION ALL
    
    SELECT B.ID, 1 + A.GENERATION
    FROM GENERATION_TABLE as A
    JOIN ECOLI_DATA as B on A.ID = B.PARENT_ID
    
)
SELECT COUNT(*) as COUNT, C.GENERATION
FROM GENERATION_TABLE as C
LEFT JOIN ECOLI_DATA as D on C.ID = D.PARENT_ID
WHERE D.ID IS NULL
GROUP BY C.GENERATION
ORDER BY C.GENERATION ASC









